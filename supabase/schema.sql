

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Device" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "last_login" timestamp without time zone DEFAULT "now"(),
    "user_id" "uuid",
    "info" "text"
);


ALTER TABLE "public"."Device" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Entry" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "content" "text",
    "journal_id" "uuid"
);


ALTER TABLE "public"."Entry" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Feedback" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "entry_id" "uuid",
    "content" "text"
);


ALTER TABLE "public"."Feedback" OWNER TO "postgres";


ALTER TABLE "public"."Feedback" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Feedback_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Journal" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "title" "text",
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "public"."Journal" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Mood" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "journal_id" "uuid",
    "score" smallint,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "public"."Mood" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Streak" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "mood_id" "uuid",
    "count" smallint
);


ALTER TABLE "public"."Streak" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."User" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "last_seen" timestamp without time zone DEFAULT "now"(),
    "email" "text",
    "password" "text"
);


ALTER TABLE "public"."User" OWNER TO "postgres";


ALTER TABLE ONLY "public"."Device"
    ADD CONSTRAINT "Device_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Entry"
    ADD CONSTRAINT "Entry_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Feedback"
    ADD CONSTRAINT "Feedback_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Journal"
    ADD CONSTRAINT "Journal_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Mood"
    ADD CONSTRAINT "Mood_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Streak"
    ADD CONSTRAINT "Streak_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."User"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Device"
    ADD CONSTRAINT "Device_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."User"("id");



ALTER TABLE ONLY "public"."Entry"
    ADD CONSTRAINT "Entry_journal_id_fkey" FOREIGN KEY ("journal_id") REFERENCES "public"."Journal"("id");



ALTER TABLE ONLY "public"."Feedback"
    ADD CONSTRAINT "Feedback_entry_id_fkey" FOREIGN KEY ("entry_id") REFERENCES "public"."Entry"("id");



ALTER TABLE ONLY "public"."Journal"
    ADD CONSTRAINT "Journal_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."User"("id");



ALTER TABLE ONLY "public"."Mood"
    ADD CONSTRAINT "Mood_journal_id_fkey" FOREIGN KEY ("journal_id") REFERENCES "public"."Journal"("id");



ALTER TABLE ONLY "public"."Streak"
    ADD CONSTRAINT "Streak_mood_id_fkey" FOREIGN KEY ("mood_id") REFERENCES "public"."Mood"("id");



ALTER TABLE "public"."Device" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Entry" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Feedback" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Journal" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Mood" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Streak" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."User" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


























































































































































































GRANT ALL ON TABLE "public"."Device" TO "anon";
GRANT ALL ON TABLE "public"."Device" TO "authenticated";
GRANT ALL ON TABLE "public"."Device" TO "service_role";



GRANT ALL ON TABLE "public"."Entry" TO "anon";
GRANT ALL ON TABLE "public"."Entry" TO "authenticated";
GRANT ALL ON TABLE "public"."Entry" TO "service_role";



GRANT ALL ON TABLE "public"."Feedback" TO "anon";
GRANT ALL ON TABLE "public"."Feedback" TO "authenticated";
GRANT ALL ON TABLE "public"."Feedback" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Feedback_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Feedback_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Feedback_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."Journal" TO "anon";
GRANT ALL ON TABLE "public"."Journal" TO "authenticated";
GRANT ALL ON TABLE "public"."Journal" TO "service_role";



GRANT ALL ON TABLE "public"."Mood" TO "anon";
GRANT ALL ON TABLE "public"."Mood" TO "authenticated";
GRANT ALL ON TABLE "public"."Mood" TO "service_role";



GRANT ALL ON TABLE "public"."Streak" TO "anon";
GRANT ALL ON TABLE "public"."Streak" TO "authenticated";
GRANT ALL ON TABLE "public"."Streak" TO "service_role";



GRANT ALL ON TABLE "public"."User" TO "anon";
GRANT ALL ON TABLE "public"."User" TO "authenticated";
GRANT ALL ON TABLE "public"."User" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
